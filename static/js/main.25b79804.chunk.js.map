{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","src_SeasonDisplay_0","src_Spinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAEMA,SAAe,CACnBC,OAAO,CACLC,KAAK,sBACLC,SAAS,OAEXC,OAAO,CACLF,KAAK,kBACLC,SAAS,eA4BEE,EAhBO,SAAAC,GACnB,IATgBC,EAAMC,EAShBC,GATUF,EASSD,EAAMC,KATTC,GASa,IAAIE,MAAOC,YARtC,GAAIH,EAAM,EACTD,EAAM,EAAI,SAAW,SAEtBA,EAAM,EAAI,SAAW,UAIHK,EAEJZ,EAAaS,GAA5BP,EAFmBU,EAEnBV,KAAKC,EAFcS,EAEdT,SAIZ,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAClCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACTU,EAAAC,EAAAC,cAAA,UAAKb,GACPW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aC5BZe,EAAU,SAACZ,GACb,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBV,EAAMa,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,aAGED,QCTTG,6MAEFC,MAAQ,CAACf,IAAI,KAAKgB,aAAa,uFAGZ,IAAAC,EAAAC,KACfC,OAAOC,UAAUC,YAAYC,mBACzB,SAACC,GAAD,OAAcN,EAAKO,SAAS,CAAExB,IAAIuB,EAASE,OAAOC,YAClD,SAACC,GAAD,OAAQV,EAAKO,SAAS,CAAER,aAAaW,EAAIf,oDAK7C,OAAIM,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMf,IAChCM,EAAAC,EAAAC,cAAA,oBAAYU,KAAKH,MAAMC,eAE1BE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMf,IAErCM,EAAAC,EAAAC,cAACoB,EAAD,CAAe5B,IAAKkB,KAAKH,MAAMf,MAG9BM,EAAAC,EAAAC,cAACqB,EAAD,CAASjB,QAAQ,oEAIzB,OACIN,EAAAC,EAAAC,cAAA,WACCU,KAAKY,wBA3BFC,IAAMC,WAgCxBC,IAASC,OACL5B,EAAAC,EAAAC,cAAC2B,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.25b79804.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\nconst seasonConfig = {\r\n  summer:{\r\n    text:'Lets hit the beach!',\r\n    iconName:'sun'\r\n  },\r\n  winter:{\r\n    text:'Burr it is cold',\r\n    iconName:'snowflake'\r\n  }\r\n};\r\n\r\nconst getSeason = (lat , month)=>{\r\n  if(month>2&& month<9){\r\n     return lat > 0 ? 'summer' : 'winter';\r\n  }else{\r\n    return lat > 0 ? 'winter' : 'summer';\r\n  }\r\n}\r\n\r\nconst SeasonDisplay = props=>{\r\n   const season = getSeason(props.lat,new Date().getMonth());\r\n   const {text,iconName}=seasonConfig[season];\r\n  //  const text = season === 'winter'?'Burr,it is chilly':'Lets hit the beach';\r\n\r\n  //  const icon = season ==='winter'?'snowflake':'sun'\r\n   return(\r\n     <div className={`season-display ${season}`}>\r\n     <i className={`icon-left massive ${iconName} icon`}/>\r\n        <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`}/>\r\n     </div>\r\n   );\r\n    \r\n};\r\n\r\nexport default SeasonDisplay;\r\n\r\n// {season === 'winter' ? 'Burr, it is chilly':'Lets hit the beach'};","import React from 'react';\r\n\r\n\r\nconst Spinner = (props) =>{\r\n    return(\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message: 'Loading..'\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {lat:null,errorMessage:''}\r\n\r\n\r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position)=>  this.setState({ lat:position.coords.latitude}) ,\r\n            (err)=> this.setState({ errorMessage:err.message})\r\n        );\r\n    }\r\n\r\n    renderContent(){\r\n        if (this.state.errorMessage && !this.state.lat){\r\n            return <div>Error:{this.state.errorMessage}</div>\r\n           }\r\n           if (!this.state.errorMessage && this.state.lat){\r\n           \r\n           return<SeasonDisplay lat={this.state.lat}/>\r\n           }\r\n\r\n           return <Spinner message=\"Please accept location request\"/>;\r\n    }\r\n    \r\n    render(){\r\n          return(\r\n              <div>\r\n              {this.renderContent()}\r\n              </div>\r\n          );\r\n    }\r\n}\r\nReactDOM.render(\r\n    <App/>,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}